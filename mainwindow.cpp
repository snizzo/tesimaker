#include "mainwindow.h"
#include "ui_mainwindow.h"

#include "aboutdialog.h"

#include <QtGui/QColor>
#include <QtCore/QDebug>
#include <QFileDialog>
#include <QStandardPaths>

#include "Qsci/qscilexerpython.h"

// This header is generated by Flex.
#include "lexer.h"

// This header is generated by bison.
#include "parser.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    ui->textEdit->setMarginWidth(0,"00000");
    ui->textEdit->setMarginLineNumbers(0, true);

    ui->textEdit->setFolding(QsciScintilla::BoxedTreeFoldStyle);
    ui->textEdit->setBraceMatching(QsciScintilla::SloppyBraceMatch);
    ui->textEdit->setCaretLineVisible(true);
    ui->textEdit->setCaretLineBackgroundColor(QColor("#CDA869"));
    ui->textEdit->setMarginsBackgroundColor(QColor("#333333"));
    ui->textEdit->setMarginsForegroundColor(QColor("#CCCCCC"));
    ui->textEdit->setFoldMarginColors(QColor("#99CC66"),QColor("#333300"));

    QsciLexerPython * lexer = new QsciLexerPython;
    ui->textEdit->setLexer(lexer);


    connect(ui->actionSave, SIGNAL(triggered(bool)), this, SLOT(saveFile()));
    connect(ui->actionLoad, SIGNAL(triggered(bool)), this, SLOT(loadFile()));
    /*
     * code mainly realted to parser
     * will actually implement one day when there will be a real necessity
     *
    QString str("{'one': 1,"
                    "\"two\": '2',"
                    "\"'3'\": [3.14, 10, [7, 8], \"\\\"quoted string\\\"\"],"
                    "'4': size(640, 480),"
                    "'date': dateTime(date(2013, 2, 27), time(12, 0)),"
                    "'number count': {'1': 1, '2': 2, '3': 3}}");

    // Insert the string into the input stream.
    YY_BUFFER_STATE bufferState = yy_scan_string(str.toUtf8().constData());

    // Parse the string.
    yyparse();

    // flush the input stream.
    yy_delete_buffer(bufferState);
    */
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::saveFile()
{
    QString filepath = QFileDialog::getSaveFileName(this,"Save file",QStandardPaths::standardLocations(QStandardPaths::DocumentsLocation).at(0),
                                                    "Tesi Maker (*.tmu);;All files (*.*)");
    if(!filepath.contains(".tmu")){
        filepath = filepath + ".tmu";
    }
    QString content = ui->textEdit->text();

    QFile file( filepath );
    if ( file.open(QIODevice::ReadWrite) )
    {
        QTextStream stream( &file );
        stream << content;
    } else {
        qDebug() << "error saving file!";
    }
}

void MainWindow::loadFile()
{
    QString filepath = QFileDialog::getOpenFileName(this,"Open File",QStandardPaths::standardLocations(QStandardPaths::DocumentsLocation).at(0),
                                                    "Tesi Maker (*.tmu);;All files (*.*)");

    QFile file(filepath);
    QString content;
    if (file.open(QIODevice::ReadWrite)) {
        QTextStream stream(&file);
        ui->textEdit->setText(stream.readAll());
    }

}

void MainWindow::on_actionQuit_triggered()
{
    QApplication::quit();
}

void MainWindow::on_actionAbout_triggered()
{
    AboutDialog about;
    about.exec();
}
